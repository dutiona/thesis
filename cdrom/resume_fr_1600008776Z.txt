C++ est un langage de programmation multiparadigme qui permet au développeur initié de mettre au point des
algorithmes de traitement d'images. La force de langage se base sur plusieurs aspects. C++ est haut-niveau, cela
signifie qu'il est possible de développer des abstractions puissantes mélangeant plusieurs styles de programmation pour
faciliter le développement. En même temps, C++ reste bas-niveau et peut pleinement tirer partie du matériel pour fournir
un maximum de performances. Il est aussi portable et très compatible ce qui lui permet de se brancher à d'autres
langages de haut niveau pour le prototypage rapide tel que Python ou Matlab. Un des aspects les plus fondamentaux où le
C++ brille, c'est la programmation générique. La programmation générique rend possible le développement et la
réutilisation de briques logiciel comme des objets (images) de différentes natures (types) sans avoir de perte au niveau
performance. Néanmoins, il n'est pas trivial de concilier les aspects de généricité, de performance et de simplicité
d'utilisation. Le C++ moderne (post-2011) amène de nouvelles fonctionnalités qui le rendent plus simple et plus
puissant. Dans cette thèse, nous explorons en premier un aspect particulier du C++20 : les concepts, dans le but de
construire une taxonomie des types relatifs au traitement d'images. Deuxièmement, nous explorons une autre
fonctionnalité ajoutée au C++20 : les ranges (et les vues). Nous appliquons ce design aux algorithmes de traitement
d'images et aux types d'image, dans le but résoudre les problèmes liés, notamment, à la difficulté qu'il existe pour
customiser les algorithmes de traitement d'image. Enfin, nous explorons les possibilités concernant la façon dont il est
possible de construire un pont entre du code C++ générique statique (compile-time) et du code Python dynamique
(runtime). Nous fournissons une solution hybride et nous mesurons ses performances. Nous discutons aussi les pistes qui
peuvent être explorées dans le futur, notamment celles qui concernent les technologies JIT. Etant donné ces trois axes,
nous voulons résoudre le problème concernant la conciliation des aspects de généricité, de performance et de simplicité
d'utilisation.