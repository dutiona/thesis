C++ is a multi-paradigm language that enables the initiated programmer to set up efficient image processing algorithms.
This language strength comes from several aspects. C++ is high-level, which enables developing powerful abstractions and
mixing different programming styles to ease the development. At the same time, C++ is low-level and can fully take
advantage of the hardware to deliver the best performance. It is also very portable and highly compatible which allows
algorithms to be called from high-level, fast-prototyping languages such as Python or Matlab. One of the most
fundamental aspects where C++ really shines is generic programming. Generic programming makes it possible to develop and
reuse bricks of software on objects (images) of different natures (types) without performance loss. Nevertheless,
conciliating the aspects of genericity, efficiency, and simplicity is not trivial. Modern C++ (post-2011) has brought
new features that made the language simpler and more powerful. In this thesis, we first explore one particular C++20
aspect: the concepts, in order to build a concrete taxonomy of image related types and algorithms. Second, we explore
another addition to C++20, ranges (and views), and we apply this design to image processing algorithms and image types
in order to solve issues such as how hard it is to customize/tweak image processing algorithms. Finally, we explore
possibilities regarding how we can offer a bridge between static (compile-time) generic C++ code and dynamic (runtime)
Python code. We offer our own hybrid solution and benchmark its performance as well as discuss what can be done in the
future with JIT technologies. Considering those three axes, we will address the issue regarding the way to conciliate
generic programming, efficiency and ease of use.